<?xml version="1.0" encoding="UTF-8"?>
<!--
~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
~
~  WSO2 Inc. licenses this file to you under the Apache License,
~  Version 2.0 (the "License"); you may not use this file except
~  in compliance with the License.
~  You may obtain a copy of the License at
~
~    http://www.apache.org/licenses/LICENSE-2.0
~
~  Unless required by applicable law or agreed to in writing,
~  software distributed under the License is distributed on an
~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
~  KIND, either express or implied.  See the License for the
~  specific language governing permissions and limitations
~  under the License.
-->

<proxy xmlns="http://ws.apache.org/ns/synapse" name="geonames" transports="https,http" statistics="disable"
       trace="disable"
       startOnLoad="true">
    <target>
        <inSequence onError="faultHandlerSeq">
            <property name="apiUrl" expression="json-eval($.apiUrl)"/>
            <property name="username" expression="json-eval($.username)"/>
            <property name="query" expression="json-eval($.query)"/>
            <property name="name" expression="json-eval($.name)"/>
            <property name="nameStartsWith" expression="json-eval($.nameStartsWith)"/>
            <property name="countries" expression="json-eval($.countries)"/>
            <property name="adminCode1" expression="json-eval($.adminCode1)"/>
            <property name="featureClasses" expression="json-eval($.featureClasses)"/>

            <property name="longitude" expression="json-eval($.longitude)"/>
            <property name="latitude" expression="json-eval($.latitude)"/>
            <property name="responseType" expression="json-eval($.responseType)"/>
            <property name="maxRows" expression="json-eval($.maxRows)"/>
            <property name="radius" expression="json-eval($.radius)"/>

            <property name="north" expression="json-eval($.north)"/>
            <property name="south" expression="json-eval($.south)"/>
            <property name="east" expression="json-eval($.east)"/>
            <property name="west" expression="json-eval($.west)"/>
            <property name="language" expression="json-eval($.language)"/>

            <property name="date" expression="json-eval($.date)"/>
            <property name="postalCode" expression="json-eval($.postalCode)"/>
            <property name="style" expression="json-eval($.style)"/>
            <property name="country" expression="json-eval($.country)"/>
            <property name="postalCodeStartsWith" expression="json-eval($.postalCodeStartsWith)"/>
            <property name="operator" expression="json-eval($.operator)"/>
            <property name="isReduced" expression="json-eval($.isReduced)"/>
            <property name="charset" expression="json-eval($.charset)"/>

            <property name="hierarchy" expression="json-eval($.hierarchy)"/>
            <property name="geonameId" expression="json-eval($.geonameId)"/>
            <property name="date" expression="json-eval($.date)"/>
            <property name="minMagnitude" expression="json-eval($.minMagnitude)"/>

            <geonames.init>
                <username>{$ctx:username}</username>
                <apiUrl>{$ctx:apiUrl}</apiUrl>
            </geonames.init>
            <switch source="get-property('transport', 'Action')">
                <case regex="urn:search">
                    <geonames.search>
                        <query>{$ctx:query}</query>
                        <name>{$ctx:name}</name>
                        <nameStartsWith>{$ctx:nameStartsWith}</nameStartsWith>
                        <countries>{$ctx:countries}</countries>
                        <adminCode1>{$ctx:adminCode1}</adminCode1>
                        <featureClasses>{$ctx:featureClasses}</featureClasses>
                    </geonames.search>
                </case>
                <case regex="urn:getNearByPointsOfInterestOSM">
                    <geonames.getNearByPointsOfInterestOSM>
                        <longitude>{$ctx:longitude}</longitude>
                        <latitude>{$ctx:latitude}</latitude>
                        <responseType>{$ctx:responseType}</responseType>
                        <maxRows>{$ctx:maxRows}</maxRows>
                        <radius>{$ctx:radius}</radius>
                    </geonames.getNearByPointsOfInterestOSM>
                </case>
                <case regex="urn:listCitiesAndPlaceNames">
                    <geonames.listCitiesAndPlaceNames>
                        <north>{$ctx:north}</north>
                        <south>{$ctx:south}</south>
                        <east>{$ctx:east}</east>
                        <west>{$ctx:west}</west>
                        <language>{$ctx:language}</language>
                        <maxRows>{$ctx:maxRows}</maxRows>
                    </geonames.listCitiesAndPlaceNames>
                </case>
                <case regex="urn:getTimezone">
                    <geonames.getTimezone>
                        <responseType>{$ctx:responseType}</responseType>
                        <date>{$ctx:date}</date>
                        <radius>{$ctx:radius}</radius>
                        <longitude>{$ctx:longitude}</longitude>
                        <language>{$ctx:language}</language>
                        <latitude>{$ctx:latitude}</latitude>
                    </geonames.getTimezone>
                </case>
                <case regex="urn:getNeighbourhood">
                    <geonames.getNeighbourhood>
                        <responseType>{$ctx:responseType}</responseType>
                        <longitude>{$ctx:longitude}</longitude>
                        <latitude>{$ctx:latitude}</latitude>
                    </geonames.getNeighbourhood>
                </case>
                <case regex="urn:listNearbyPostalCodes">
                    <geonames.listNearbyPostalCodes>
                        <postalCode>{$ctx:postalCode}</postalCode>
                        <style>{$ctx:style}</style>
                        <responseType>{$ctx:responseType}</responseType>
                        <maxRows>{$ctx:maxRows}</maxRows>
                        <longitude>{$ctx:longitude}</longitude>
                        <latitude>{$ctx:latitude}</latitude>
                    </geonames.listNearbyPostalCodes>
                </case>
                <case regex="urn:listPlacesForPostalCode">
                    <geonames.listPlacesForPostalCode>
                        <postalCode>{$ctx:postalCode}</postalCode>
                        <maxRows>{$ctx:maxRows}</maxRows>
                        <charset>{$ctx:charset}</charset>
                    </geonames.listPlacesForPostalCode>
                </case>
                <case regex="urn:postalCodeSearch">
                    <geonames.postalCodeSearch>
                        <isReduced>{$ctx:isReduced}</isReduced>
                        <charset>{$ctx:charset}</charset>
                        <operator>{$ctx:operator}</operator>
                        <country>{$ctx:country}</country>
                        <postalCodeStartsWith>{$ctx:postalCodeStartsWith}</postalCodeStartsWith>
                        <style>{$ctx:style}</style>
                        <responseType>{$ctx:responseType}</responseType>
                        <maxRows>{$ctx:maxRows}</maxRows>
                    </geonames.postalCodeSearch>
                </case>
                <case regex="urn:getChildren">
                    <geonames.getChildren>
                        <geonameId>{$ctx:geonameId}</geonameId>
                        <maxRows>{$ctx:maxRows}</maxRows>
                        <hierarchy>{$ctx:hierarchy}</hierarchy>
                    </geonames.getChildren>
                </case>
                <case regex="urn:getWeatherStationWithObservation">
                    <geonames.getWeatherStationWithObservation>
                        <longitude>{$ctx:longitude}</longitude>
                        <latitude>{$ctx:latitude}</latitude>
                        <radius>{$ctx:radius}</radius>
                    </geonames.getWeatherStationWithObservation>
                </case>
                <case regex="urn:listHierarchyOfPlaceNames">
                    <geonames.listHierarchyOfPlaceNames>
                        <geonameId>{$ctx:geonameId}</geonameId>
                    </geonames.listHierarchyOfPlaceNames>
                </case>
                <case regex="urn:listRecentEarthquakes">
                    <geonames.listRecentEarthquakes>
                        <north>{$ctx:north}</north>
                        <south>{$ctx:south}</south>
                        <east>{$ctx:east}</east>
                        <west>{$ctx:west}</west>
                        <date>{$ctx:date}</date>
                        <minMagnitude>{$ctx:minMagnitude}</minMagnitude>
                        <maxRows>{$ctx:maxRows}</maxRows>
                    </geonames.listRecentEarthquakes>
                </case>
                <case regex="urn:listWeatherStations">
                    <geonames.listWeatherStations>
                        <north>{$ctx:north}</north>
                        <south>{$ctx:south}</south>
                        <east>{$ctx:east}</east>
                        <west>{$ctx:west}</west>
                        <maxRows>{$ctx:maxRows}</maxRows>
                    </geonames.listWeatherStations>
                </case>
                <case regex="urn:getNearestIntersectionOSM">
                    <geonames.getNearestIntersectionOSM>
                        <longitude>{$ctx:longitude}</longitude>
                        <latitude>{$ctx:latitude}</latitude>
                        <maxRows>{$ctx:maxRows}</maxRows>
                        <radius>{$ctx:radius}</radius>
                    </geonames.getNearestIntersectionOSM>
                </case>
            </switch>
            <respond/>
        </inSequence>
        <outSequence>
            <log/>
            <send/>
        </outSequence>
    </target>
    <description/>
</proxy>
                                