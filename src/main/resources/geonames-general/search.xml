<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->

<!-- API Doc: http://www.geonames.org/export/geonames-search.html -->
<template name="search" xmlns="http://ws.apache.org/ns/synapse">
    <parameter name="query" description="The query to search over all attributes of a place."/>
    <parameter name="name" description="The place name."/>
    <parameter name="nameEquals" description="The exact place name."/>
    <parameter name="nameStartsWith" description="The place name starts with given characters."/>
    <parameter name="maxRows" description="The maximal number of rows in the document returned by the service."/>
    <parameter name="startRow" description="The starting row for the result."/>
    <parameter name="countries" description="The country codes to filter the results."/>
    <parameter name="countryBias" description="The two letter country code to filter the results."/>
    <parameter name="continentCode" description="The continent code to filter the results."/>
    <parameter name="adminCode1" description="The code of administrative subdivision."/>
    <parameter name="adminCode2" description="The code of administrative subdivision."/>
    <parameter name="adminCode3" description="The code of administrative subdivision."/>
    <parameter name="featureClasses" description="The feature classes."/>
    <parameter name="featureCodes" description="The feature codes."/>
    <parameter name="cities" description="The city population category."/>
    <parameter name="language" description="The language which place name and country name will be returned."/>
    <parameter name="documentReturnType" description="The format type of the returned document."/>
    <parameter name="style" description="The verbosity of returned xml document."/>
    <parameter name="isNameRequired"
               description="Value to ristrict at least one of the search term needs to be part of the place name."/>
    <parameter name="tag" description="Search for toponyms tagged with the specified tag."/>
    <parameter name="operator" description="The operator to filter the result."/>
    <parameter name="charset" description="The encoding used for the document returned."/>
    <parameter name="fuzzy" description="Defines the fuzziness of the search terms."/>
    <parameter name="east" description="The east value for bounding box."/>
    <parameter name="west" description="The west value for bounding box."/>
    <parameter name="north" description="The north value for bounding box."/>
    <parameter name="south" description="The south value for bounding box."/>
    <parameter name="searchLanguage" description="The search will only consider names in the specified language."/>
    <parameter name="orderBy" description="The value to sort the result."/>
    <parameter name="responseType" description="The response type of the method."/>
    <sequence>
        <property name="uri.var.query" expression="$func:query"/>
        <property name="uri.var.name" expression="$func:name"/>
        <property name="uri.var.nameEquals" expression="$func:nameEquals"/>
        <property name="uri.var.nameStartsWith" expression="$func:nameStartsWith"/>
        <property name="uri.var.maxRows" expression="$func:maxRows"/>
        <property name="uri.var.startRow" expression="$func:startRow"/>
        <property name="uri.var.countries" expression="$func:countries"/>
        <property name="uri.var.countryBias" expression="$func:countryBias"/>
        <property name="uri.var.continentCode" expression="$func:continentCode"/>
        <property name="uri.var.adminCode1" expression="$func:adminCode1"/>
        <property name="uri.var.adminCode2" expression="$func:adminCode2"/>
        <property name="uri.var.adminCode3" expression="$func:adminCode3"/>
        <property name="uri.var.featureClasses" expression="$func:featureClasses"/>
        <property name="uri.var.featureCodes" expression="$func:featureCodes"/>
        <property name="uri.var.cities" expression="$func:cities"/>
        <property name="uri.var.language" expression="$func:language"/>
        <property name="uri.var.documentReturnType" expression="$func:documentReturnType"/>
        <property name="uri.var.style" expression="$func:style"/>
        <property name="uri.var.isNameRequired" expression="$func:isNameRequired"/>
        <property name="uri.var.tag" expression="$func:tag"/>
        <property name="uri.var.operator" expression="$func:operator"/>
        <property name="uri.var.charset" expression="$func:charset"/>
        <property name="uri.var.fuzzy" expression="$func:fuzzy"/>
        <property name="uri.var.east" expression="$func:east"/>
        <property name="uri.var.west" expression="$func:west"/>
        <property name="uri.var.north" expression="$func:north"/>
        <property name="uri.var.south" expression="$func:south"/>
        <property name="uri.var.searchLanguage" expression="$func:searchLanguage"/>
        <property name="uri.var.orderBy" expression="$func:orderBy"/>
        <property name="uri.var.responseType" expression="$func:responseType"/>
        <script language="js">
            <![CDATA[
	         var query = mc.getProperty('uri.var.query');
	         var name = mc.getProperty('uri.var.name');
	         var nameEquals = mc.getProperty('uri.var.nameEquals');
	         var nameStartsWith = mc.getProperty('uri.var.nameStartsWith');
	         var maxRows = mc.getProperty('uri.var.maxRows');
	         var startRow = mc.getProperty('uri.var.startRow');
	         var countries = mc.getProperty('uri.var.countries');
	         var countryBias = mc.getProperty('uri.var.countryBias');
	         var continentCode = mc.getProperty('uri.var.continentCode');
	         var adminCode1 = mc.getProperty('uri.var.adminCode1');
	         var adminCode2 = mc.getProperty('uri.var.adminCode2');
	         var adminCode3 = mc.getProperty('uri.var.adminCode3');
	         var cities = mc.getProperty('uri.var.cities');
	         var featureClasses = mc.getProperty('uri.var.featureClasses');
	         var featureCodes = mc.getProperty('uri.var.featureCodes');
	         var language = mc.getProperty('uri.var.language');
	         var documentReturnType = mc.getProperty('uri.var.documentReturnType');
	         var style = mc.getProperty('uri.var.style');
	         var isNameRequired = mc.getProperty('uri.var.isNameRequired');
	         var tag = mc.getProperty('uri.var.tag');
	         var operator = mc.getProperty('uri.var.operator');
	         var charset = mc.getProperty('uri.var.charset');
	         var fuzzy = mc.getProperty('uri.var.fuzzy');
	         var east = mc.getProperty('uri.var.east');
	         var west = mc.getProperty('uri.var.west');
	         var north = mc.getProperty('uri.var.north');
	         var south = mc.getProperty('uri.var.south');
	         var searchLanguage = mc.getProperty('uri.var.searchLanguage');
	         var orderBy = mc.getProperty('uri.var.orderBy');
	         var responseType = mc.getProperty('uri.var.responseType');
	         var urlQuery = mc.getProperty('uri.var.urlQuery');
	         if (query != null && query != ""){
	            urlQuery += '&' + 'q=' + query;
	         }
	         if (name != null && name != ""){
	            urlQuery += '&' + 'name=' + name;
	         }
	         if (nameEquals != null && nameEquals != ""){
	            urlQuery += '&' + 'name_equals=' + nameEquals;
	         }
	         if (nameStartsWith != null && nameStartsWith != ""){
	            urlQuery += '&' + 'name_startsWith=' + nameStartsWith;
	         }
	         if (maxRows != null && maxRows != ""){
	            urlQuery += '&' + 'maxRows=' + maxRows;
	         }
	         if (startRow != null && startRow != ""){
	            urlQuery += '&' + 'startRow=' + startRow;
	         }
	         if (countries != null && countries != "" && countries !="[]"){            
	            if(countries.charCodeAt(0) == '91') {
	               countries = eval("(" + countries + ")");
	               for (var i = 0;i<countries.length;i++) {
	                  urlQuery += '&' + 'country=' + countries[i];      
	               }
	            }
	         }
	         if (countryBias != null && countryBias != ""){
	            urlQuery += '&' + 'countryBias=' + countryBias;
	         }
	         if (continentCode != null && continentCode != ""){
	            urlQuery += '&' + 'continentCode=' + continentCode;
	         }
	         if (adminCode1 != null && adminCode1 != ""){
	            urlQuery += '&' + 'adminCode1=' + adminCode1;
	         }
	         if (adminCode2 != null && adminCode2 != ""){
	            urlQuery += '&' + 'adminCode2=' + adminCode2;
	         }
	         if (adminCode3 != null && adminCode3 != ""){
	            urlQuery += '&' + 'adminCode3=' + adminCode3;
	         }
	         if (cities != null && cities != ""){
	            urlQuery += '&' + 'cities=' + cities;
	         }
	         if (featureClasses != null && featureClasses != "" && featureClasses !="[]"){            
	            if(featureClasses.charCodeAt(0) == '91') {
	               featureClasses = eval("(" + featureClasses + ")");
	               for (var i = 0;i<featureClasses.length;i++) {
	                  urlQuery += '&' + 'featureClass=' + featureClasses[i];      
	               }
	            }
	         }
	         if (featureCodes != null && featureCodes != "" && featureCodes !="[]"){            
	            if(featureCodes.charCodeAt(0) == '91') {
	               featureCodes = eval("(" + featureCodes + ")");
	               for (var i = 0;i<featureCodes.length;i++) {
	                  urlQuery += '&' + 'featureCode=' + featureCodes[i];      
	               }
	            }
	         }
	         if (language != null && language != ""){
	            urlQuery += '&' + 'lang=' + language;
	         }
	         if (documentReturnType != null && documentReturnType != ""){
	            urlQuery += '&' + 'type=' + documentReturnType;
	         }
	         if (style != null && style != ""){
	            urlQuery += '&' + 'style=' + style;
	         }
	         if (isNameRequired != null && isNameRequired != ""){
	            urlQuery += '&' + 'isNameRequired=' + isNameRequired;
	         }
	         if (tag != null && tag != ""){
	            urlQuery += '&' + 'tag=' + tag;
	         }         
	         if (operator != null && operator != ""){
	            urlQuery += '&' + 'operator=' + operator;
	         }
	         if (charset != null && charset != ""){
	            urlQuery += '&' + 'charset=' + charset;
	         }
	         if (fuzzy != null && fuzzy != ""){
	            urlQuery += '&' + 'fuzzy=' + fuzzy;
	         }
	         if (east != null && east != ""){
	            urlQuery += '&' + 'east=' + east;
	         }
	         if (west != null && west != ""){
	            urlQuery += '&' + 'west=' + west;
	         }
	         if (north != null && north != ""){
	            urlQuery += '&' + 'north=' + north;
	         }
	         if (south != null && south != ""){
	            urlQuery += '&' + 'south=' + south;
	         }
	         if (searchLanguage != null && searchLanguage != ""){
	            urlQuery += '&' + 'searchlang=' + searchLanguage;
	         }
	         if (orderBy != null && orderBy != ""){
	            urlQuery += '&' + 'orderby=' + orderBy;
	         }
	         if (responseType == null || responseType == ""){
	            responseType='json'; 
	         }
	         mc.setProperty('uri.var.urlQuery',urlQuery); 
	         if (responseType == 'json') {
	            mc.setProperty('uri.var.endpoint', 'searchJSON');
	         } else if (responseType == 'xml'){
	            mc.setProperty('uri.var.endpoint', 'search');
	         } else if (responseType == 'rdf'){
	            mc.setProperty('uri.var.endpoint', 'searchRDF');
	         } else {
	            mc.setProperty('uri.var.endpoint', 'search' + responseType);
	         }
	      ]]>
        </script>
        <call>
            <endpoint>
                <http method="get" uri-template="{+uri.var.apiUrl}/{+uri.var.endpoint}{+uri.var.urlQuery}"/>
            </endpoint>
        </call>
        <!-- Remove custom Headers from the API Response -->
        <header name="Cache-Control" action="remove" scope="transport"/>
        <header name="Access-Control-Allow-Origin" action="remove" scope="transport"/>
        <header name="Via" action="remove" scope="transport"/>
        <header name="Vary" action="remove" scope="transport"/>
        <header name="Accept-Ranges" action="remove" scope="transport"/>
    </sequence>
</template>